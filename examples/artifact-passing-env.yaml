# Example workflow to demonstrate parameter aggregation in a DAG.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameter-aggregation-dag-
  labels:
    paiflow.pipelines.run.id: "11"
    paiflow.pipelines.user.id: "dsf"
spec:
  entrypoint: parameter-aggregation
  templates:
  - name: parameter-aggregation
    dag:
      tasks:
      # First loop through a list of numbers and determine if the number is odd or even. This is
      # captured in output parameter 'evenness'. (e.g. {"num": "4", "evenness": "even"})
      - name: odd-or-even
        template: odd-or-even
        arguments:
          parameters:
          - name: num
            value: "{{item}}"
        withItems: [1]
      # Next, for each even number, divide it by two (using a script template).
      # Skip odd numbers using a `when` clause.
      - name: divide-by-2
        dependencies: [odd-or-even]
        template: divide-by-2
        arguments:
          parameters:
          - name: num
            value: "{{item.num}}"
        withParam: "{{tasks.odd-or-even.outputs.parameters}}"
        when: "{{item.evenness}} == odd"
      # Finally, print all numbers processed in the previous step
      - name: print
        dependencies: [divide-by-2]
        template: whalesay
        arguments:
          parameters:
          - name: message
            value: "{{item}}"
        withParam: "{{tasks.divide-by-2.outputs.result}}"

  # odd-or-even accepts a number and returns whether or not that number is odd or even
  - name: odd-or-even
    inputs:
      parameters:
      - name: num
    container:
      image: alpine:latest
      command: [sh, -xc]
      args:
      - |
        sleep 1 &&
        echo {{inputs.parameters.num}} > /tmp/num &&
        if [ $(({{inputs.parameters.num}}%2)) -eq 0 ]; then
          echo "even" > /tmp/even;
        else
          echo "odd" > /tmp/even;
        fi
    outputs:
      parameters:
      - name: num
        valueFrom:
          path: /tmp/num
      - name: evenness
        valueFrom:
          path: /tmp/even

  # divide-by-2 divides a number in half
  - name: divide-by-2
    inputs:
      parameters:
      - name: num
    script:
      image: alpine:latest
      command: [sh, -x]
      source: |
        #!/bin/sh
        echo $(({{inputs.parameters.num}}*2))

  # whalesay prints a number using whalesay
  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      env:
      - name: a
        value: '{{inputs.parameters.message}}'
      image: docker/whalesay:latest
      command: [sh, -c]
      args:
      - |
        echo $a
